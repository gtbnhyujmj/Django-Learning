Django 版程式碼重構（以 accounts app 為例）

1. models.py

# accounts/models.py
from django.contrib.auth.models import AbstractUser
from django.db import models

class User(AbstractUser):
    # 這裡你可以擴充額外欄位，例如 accountID
    accountID = models.IntegerField(null=True, blank=True)
注意：Django 預設有 User model，這裡用 AbstractUser 自訂 User 模型以方便擴充欄位。如果不需要擴充，直接用 Django 內建 User 也可。

2. settings.py

# sc/settings.py

INSTALLED_APPS = [
    # 其他內建 app
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 你的 app
    'accounts',
]

# 使用自訂 User 模型
AUTH_USER_MODEL = 'accounts.User'

# SQLite 設定 (跟你的 Flask 一樣是 sqlite 資料庫)
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'users.db',
    }
}


3. forms.py

# accounts/forms.py
from django import forms
from django.contrib.auth.forms import UserCreationForm, AuthenticationForm
from .models import User

class RegisterForm(UserCreationForm):
    class Meta:
        model = User
        fields = ['username', 'password1', 'password2']

class LoginForm(AuthenticationForm):
    pass

4. views.py

# accounts/views.py
from django.shortcuts import render, redirect
from django.contrib.auth import login, logout, authenticate
from django.contrib.auth.decorators import login_required
from .forms import RegisterForm, LoginForm
from django.http import JsonResponse
from urllib.parse import parse_qs

def home(request):
    return render(request, 'home.html')

def register_view(request):
    if request.method == 'POST':
        form = RegisterForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)
            return redirect('dashboard')
    else:
        form = RegisterForm()
    return render(request, 'accounts/register.html', {'form': form})

def login_view(request):
    if request.method == 'POST':
        form = LoginForm(request, data=request.POST)
        if form.is_valid():
            user = form.get_user()
            login(request, user)
            return redirect('dashboard')
    else:
        form = LoginForm()
    return render(request, 'accounts/login.html', {'form': form})

@login_required
def logout_view(request):
    logout(request)
    return redirect('login')

@login_required
def dashboard(request):
    return render(request, 'dashboard.html', {'username': request.user.username})

def json_view(request):
    raw_data = ""
    parsed_dict = {}

    if request.method == "POST":
        raw_data = request.body.decode('utf-8')
    elif request.method == "GET":
        raw_data = request.META.get('QUERY_STRING', '')

    parsed_qs = parse_qs(raw_data)
    parsed_dict = {k: v[0] if len(v) == 1 else v for k, v in parsed_qs.items()}

    return render(request, 'json_view.html', {'raw_data': raw_data, 'parsed_dict': parsed_dict})

from django.views.decorators.http import require_GET

@require_GET
def api_users(request):
    users = User.objects.all()
    users_data = []
    for user in users:
        users_data.append({
            'id': user.id,
            'username': user.username,
            'accountID': user.accountID,
        })
    return JsonResponse(users_data, safe=False)

                   
5. urls.py
                   
# accounts/urls.py
from django.urls import path
from . import views

urlpatterns = [
    path('', views.home, name='home'),
    path('register/', views.register_view, name='register'),
    path('login/', views.login_view, name='login'),
    path('logout/', views.logout_view, name='logout'),
    path('dashboard/', views.dashboard, name='dashboard'),
    path('json_view/', views.json_view, name='json_view'),
    path('api/users/', views.api_users, name='api_users'),
]
                   

# sc/urls.py (主專案路由)
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('accounts.urls')),
]

                   
6. 範例模板（放在 accounts/templates/accounts/）
register.html

<h2>Register</h2>
<form method="POST">
  {% csrf_token %}
  {{ form.as_p }}
  <button type="submit">Register</button>
</form>
                   
<a href="{% url 'login' %}">Already have an account? Login</a>

                   
login.html

<h2>Login</h2>
<form method="POST">
  {% csrf_token %}
  {{ form.as_p }}
  <button type="submit">Login</button>
</form>
                   
<a href="{% url 'register' %}">Register new account</a>

dashboard.html

<h2>Welcome, {{ username }}</h2>
<a href="{% url 'logout' %}">Logout</a>

                   
json_view.html

                   
<h2>收到的原始資料：</h2>
<pre>{{ raw_data }}</pre>

<h2>解析後的 JSON 結構：</h2>
<pre>{{ parsed_dict|safe }}</pre>

                   
7. 初始化及其他說明
建立 migrations：
python manage.py makemigrations accounts
python manage.py migrate

建立管理者帳號：
python manage.py createsuperuser
直接用 Django 的 request.user 代替 Flask 的 session['username']

密碼加密和驗證由 Django 內建管理，不用自己寫雜湊與比對

這樣就完成了你 Flask 版本的帳號管理系統，並額外帶入你那些 API 及功能。
